user nginx;

worker_processes auto;

events {
    worker_connections 1024;
}

http {
    log_format upstream_time '$remote_addr $http_x_forwarded_for - $remote_user [$time_local] '
                             '$ssl_protocol "$request" $status $body_bytes_sent '
                             '"$http_referer" "$http_user_agent" '
                             'rt=$request_time uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log upstream_time;

    include /etc/nginx/proxy.conf;
    include /etc/nginx/mime.types;

    limit_req_zone $binary_remote_addr zone=one:10m rate=5r/s;
    server_tokens off;

    sendfile on;
    keepalive_timeout 29;
    client_body_timeout 10;
    client_header_timeout 10;
    send_timeout 10;

    upstream api {
        server first-api:3000;
    }

    map $host:$server_port $redirect_port {
        default "";
        "localhost:3000" ":3001";  # Redirect localhost:3000 to localhost:3001
    }

    server {
        listen 80 default_server;
        server_name _;  # You can also set a specific domain if necessary
        add_header Strict-Transport-Security max-age=15768000;
        if ($redirect_port) {
            return 301 https://localhost$redirect_port$request_uri;  # Redirect to https://localhost:3001
        }
        return 301 https://$host$request_uri;  # Default redirect to https://<host>
    }

    server {
        listen 443 ssl;
        server_name localhost 127.0.0.1;  # Adjust server_name as needed for production

        ssl_certificate             /etc/ssl/certs/localhost.crt;
        ssl_certificate_key         /etc/ssl/certs/localhost.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers "TLS_AES_128_GCM_SHA256:EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
        ssl_ecdh_curve secp384r1;
        ssl_session_cache shared:SSL:10m;
        ssl_session_tickets off;

        add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload" always;
        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-Content-Type-Options nosniff;

        location / {
            proxy_pass http://api/;
            limit_req zone=one burst=10 nodelay;
        }
    }
}
